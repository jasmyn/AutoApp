#!/usr/bin/env node
const fs = require('fs')
const { Transform } = require('stream')
const readdirp = require('readdirp')

//#region get files, dirs
let files, dirs, fileNames, dirNames

const getDirs = async () => {
	try {
		dirs = await readdirp.promise('./test', {
			root: './',
			type: 'directories',
			directoryFilter: [ '!.git', '!*modules' ],
			alwaysStat: true
		})
		dirNames = dirs.map(dir => dir.path)
		// dirNames = dirs.map(dir => dir.fullPath)
	} catch (err) {
		throw err
	}
}

const getFiles = async () => {
	try {
		files = await readdirp.promise('./test', {
			root: './',
			type: 'files',
			directoryFilter: [ '!.git', '!*modules' ],
			fileFilter: ['!*.png', '!*.ico', '!.DS_Store'],
			alwaysStat: true
		})
		fileNames = files.map(file => [file.path, file.fullPath])
		// fileNames = files.map(file => file.fullPath)
	} catch (err) {
		throw err
	}
}

// #endregion

//#region process files
const writeMe = fs.createWriteStream('output', {flags: 'a'})

const TransformStream = new Transform({
	transform(chunk, encoding, callback) {
		// console.log('before: ', chunk.toString())
	
		const reNewLine = /\n/g
		const reTab = /\t/g
		const reQuote = /'/g
		const reDQuote = /"/g
		const newChunk = chunk.toString().replace(reNewLine, '\\n').replace(reTab, '\\t').replace(reQuote, "\\'").replace(reDQuote, '\\"')
		
		writeMe.write(`  content: "${newChunk}"},\n`)
		
		// console.log('after: ', newChunk)
		this.push(newChunk) // TODO necessary?
		callback()
	}
})

const processFiles = async () => {
	await getFiles()
	for (const file of fileNames) {
		await fs.createReadStream(file[1])
		.on('data', (chunk) => {
				writeMe.write(`{ file: '${file[0]}',\n`)
			})
		.pipe(TransformStream)
		TransformStream.resume() // TODO still leaking...
	}
}
processFiles()

const processDirs = async () => {
	await getDirs()
	writeMe.write(`let dirs = [\n`)
	for (const dir of dirNames) {
		console.log(dir)
			writeMe.write(`\t'${dir}',\n`)
	}
	writeMe.write(`]\n\n`)
}
processDirs()

//#endregion