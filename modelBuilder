#!/usr/bin/env node
const fs = require('fs-extra')
const { Transform } = require('stream')

const config = {
	dbNounSingular: 'film',
	dbNounPlural: 'films',
	dbSchema: {
		title: {
			type: 'String',
			required: true
		},
		director: {
			type: 'String',
			required: true
		},
		year: {
			type: 'Number',
			required: true
		}
	}
}

let lowerCaseSingular, titleCaseSingular, lowerCasePlural

;(function makeNouns() {
	lowerCaseSingular = config.dbNounSingular.toLowerCase()
	titleCaseSingular = config.dbNounSingular[0].toUpperCase() + config.dbNounSingular.slice(1)
	lowerCasePlural = config.dbNounPlural.toLowerCase()
})()

makeModel = () => {
	let schema = ''
	for (const key in config.dbSchema) {
		schema += `	${key}: { type: ${config.dbSchema[key].type}, required: ${config.dbSchema[key].required}},\n`
	}

	const model = `const mongoose = require('mongoose')

const ${lowerCaseSingular}Schema = new mongoose.Schema({
${schema}
})
mongoose.model('${titleCaseSingular}', ${lowerCaseSingular}Schema) // the first param determines the collection name
`
// console.log(`\n${model}`)
	return model
}

packModel = async () => {
	try {
		const writeModel = await fs.createWriteStream(`model/${lowerCasePlural}.packed.js`, {flags: 'a'})
		await writeModel.write("{ file: 'app.js',\n  content: ")
		
		const model = makeModel()
		
		const reNewLine = /\n/g
		const reTab = /\t/g
		const reQuote = /'/g
		
		const packedModel = 
			'"' + model
				.replace(reNewLine, '\\n')
				.replace(reTab, '\\t')
				.replace(reQuote, "\\'")
			+ '"'
		
		await writeModel.write(packedModel)
		await writeModel.write('},')
	} catch (err) {
		console.error('Problem packing model!')
		throw err
	}
}
packModel()

//#region process files

const TransformStream = new Transform({
	transform(chunk, encoding, callback) {
		// console.log('before: ', chunk.toString())
	
		const reNewLine = /\n/g
		const reTab = /\t/g
		const reQuote = /'/g
		const reDQuote = /"/g
		const newChunk = chunk.toString()
			.replace(reNewLine, '\\n')
			.replace(reTab, '\\t')
			.replace(reQuote, "\\'")
			.replace(reDQuote, '\\"')
		
		writeModel.write(`${newChunk}`)
		
		// console.log('after: ', newChunk)
		callback()
	}
})

// const makeModel = async () => {
// 	await makeBaseModel()
// 	await fs.createReadStream(`/Users/jaz/CODE/React/aa-1.5/model/movies.js`)
// 		.pipe(TransformStream)
// 	TransformStream.resume() // TODO still leaking...
// }
// makeModel()

//#endregion