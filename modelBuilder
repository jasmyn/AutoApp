#!/usr/bin/env node
const fs = require('fs-extra')

const config = {
	dbNounSingular: 'film',
	dbNounPlural: 'films',
	dbSchema: {
		title: {
			type: 'String',
			required: true
		},
		director: {
			type: 'String',
			required: true
		},
		year: {
			type: 'Number',
			required: true
		}
	}
}

let lowerCaseSingular, titleCaseSingular, lowerCasePlural

;(function makeNouns() {
	lowerCaseSingular = config.dbNounSingular.toLowerCase()
	titleCaseSingular = config.dbNounSingular[0].toUpperCase() + config.dbNounSingular.slice(1)
	lowerCasePlural = config.dbNounPlural.toLowerCase()
})()

makeModel = () => {
	let schema = ''
	for (const key in config.dbSchema) {
		schema += `	${key}: { type: ${config.dbSchema[key].type}, required: ${config.dbSchema[key].required}},\n`
	}

	const model = `const mongoose = require('mongoose')

const ${lowerCaseSingular}Schema = new mongoose.Schema({
${schema}
})
mongoose.model('${titleCaseSingular}', ${lowerCaseSingular}Schema) // the first param determines the collection name
`
console.log(`\n${model}`)
	return model
}

packModel = async () => {
	try {
		const writeModel = await fs.createWriteStream(`model/${lowerCasePlural}.js`, {flags: 'a'})
		await writeModel.write(`{ file: 'api/models/${lowerCasePlural}.js',\n  content: `)
		
		const model = makeModel()

		const reNewLine = /\n/g
		const reTab = /\t/g
		const reQuote = /'/g
		
		const packedModel = 
		'"' + model
		.replace(reNewLine, '\\n')
		.replace(reTab, '\\t')
		.replace(reQuote, "\\'")
		+ '"'
		
		console.log(packedModel)
		
		const objModel = {
			file: `'api/models/${lowerCasePlural}.js'`,
			content: packedModel
		}
		
		await writeModel.write(packedModel)
		await writeModel.write('},')
	} catch (err) {
		console.error('Problem packing model!')
		throw err
	}
}
packModel()