#!/usr/bin/env node
const fs = require('fs')
const { Transform } = require('stream')
const readdirp = require('readdirp')

//#region get files, dirs
let files, fileNames

//TODO get lowerCaseSingular, titleCaseSingular, lowerCasePlural
const lowerCaseSingular = 'film'
const titleCaseSingular = 'Film'
const lowerCasePlural = 'films'

//TODO file name: lowerCasePlural.js

const getFiles = async () => {
	try {
		files = await readdirp.promise('./test', {
			root: './',
			type: 'files',
			directoryFilter: [ '!.git', '!*modules' ],
			fileFilter: ['!*.png', '!*.ico', '!.DS_Store', '!*.lock'],
			alwaysStat: true
		})
		fileNames = files.map(file => [file.path, file.fullPath])
	} catch (err) {
		throw err
	}
}

// #endregion

//#region process files
const writeMe = fs.createWriteStream('output', {flags: 'a'})

const TransformStream = new Transform({
	transform(chunk, encoding, callback) {
		// console.log('before: ', chunk.toString())
	
		const reNewLine = /\n/g
		const reTab = /\t/g
		const reQuote = /'/g
		const reDQuote = /"/g
		const reLcNoun = /movie/g // lower case noun
		const reTcNoun = /Movie/g // title case noun
		const newChunk = chunk.toString()
											.replace(reNewLine, '\\n')
											.replace(reTab, '\\t')
											.replace(reQuote, "\\'")
											.replace(reDQuote, '\\"')
											.replace(reLcNoun, '" + lowerCaseSingular + "')
											.replace(reTcNoun, '" + titleCaseSingular + "')
		
		writeMe.write(`  content: "${newChunk}"},\n`)
		
		// console.log('after: ', newChunk)
		this.push(newChunk) // TODO necessary?
		callback()
	}
})

const processFiles = async () => {
	await getFiles()
	for (const file of fileNames) {
		await fs.createReadStream(file[1])
		.on('data', (chunk) => {
				writeMe.write(`{ file: '${file[0]}',\n`)
			})
		.pipe(TransformStream)
		TransformStream.resume() // TODO still leaking...
	}
}
processFiles()

//#endregion